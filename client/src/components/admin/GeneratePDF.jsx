import React from 'react';
import { Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer';

// Create styles for PDF with orientation support
const createStyles = (orientation) => StyleSheet.create({
    page: {
        flexDirection: 'column',
        backgroundColor: '#ffffff',
        padding: orientation === 'landscape' ? 30 : 35,
    },
    header: {
        fontSize: 18,
        fontWeight: 'bold',
        textAlign: 'center',
        marginBottom: 5,
    },
    subHeader: {
        fontSize: 10,
        color: '#666',
        textAlign: 'center',
        marginBottom: 15,
    },
    table: {
        display: 'table',
        width: 'auto',
        borderStyle: 'solid',
        borderWidth: 1,
        borderColor: '#bfbfbf',
        borderRightWidth: 0,
        borderBottomWidth: 0,
    },
    tableRow: {
        flexDirection: 'row',
        borderBottomWidth: 1,
        borderBottomColor: '#bfbfbf',
    },
    tableHeader: {
        backgroundColor: '#f0f0f0',
    },
    tableCell: {
        borderRightWidth: 1,
        borderRightColor: '#bfbfbf',
        padding: orientation === 'landscape' ? 5 : 4,
        minHeight: 30,
        textAlign: 'left',
        fontSize: orientation === 'landscape' ? 9 : 8,
        justifyContent: 'center',
    },
    tableCellContent: {
        width: '100%',
    },
    lastCell: {
        borderRightWidth: 1,
    },
    footer: {
        position: 'absolute',
        bottom: 30,
        left: 0,
        right: 0,
        textAlign: 'center',
        fontSize: 8,
        color: '#666',
    },
    pageNumbers: {
        position: 'absolute',
        bottom: 15,
        left: 0,
        right: 0,
        textAlign: 'center',
        fontSize: 8,
        color: '#666',
    }
});

const TablePDFDocument = ({ 
    title, 
    columns, 
    data,
    getRowData,
    orientation = 'landscape' // default to landscape for many columns
}) => {
    const styles = createStyles(orientation);

    return (
        <Document>
            <Page size="A4" orientation={orientation} style={styles.page} wrap>
                <Text style={styles.header}>{title}</Text>
                <Text style={styles.subHeader}>
                    Generated on: {new Date().toLocaleDateString()} {new Date().toLocaleTimeString()}
                </Text>

                <View style={styles.table}>
                    {/* Table Header */}
                    <View style={[styles.tableRow, styles.tableHeader]}>
                        {columns.map((column, index) => (
                            <View 
                                key={column.key} 
                                style={[
                                    styles.tableCell, 
                                    { width: `${column.width}%` },
                                    index === columns.length - 1 && styles.lastCell
                                ]}
                            >
                                <Text>{column.header}</Text>
                            </View>
                        ))}
                    </View>

                    {/* Table Data */}
                    {data.length > 0 ? (
                        data.map((item, rowIndex) => (
                            <View key={rowIndex} style={styles.tableRow}>
                                {columns.map((column, colIndex) => (
                                    <View 
                                        key={`${rowIndex}-${colIndex}`} 
                                        style={[
                                            styles.tableCell, 
                                            { width: `${column.width}%` },
                                            colIndex === columns.length - 1 && styles.lastCell
                                        ]}
                                    >
                                        <Text style={styles.tableCellContent} wrap>
                                            {getRowData(item, column.key)}
                                        </Text>
                                    </View>
                                ))}
                            </View>
                        ))
                    ) : (
                        <View style={styles.tableRow}>
                            <View style={[styles.tableCell, { width: '100%' }]}>
                                <Text>No data available</Text>
                            </View>
                        </View>
                    )}
                </View>

                <Text style={styles.footer}>
                    Total Records: {data.length} | Report Generated by Orphanage Management System
                </Text>
                
                <Text 
                    style={styles.pageNumbers}
                    render={({ pageNumber, totalPages }) => `${pageNumber} / ${totalPages}`} 
                    fixed 
                />
            </Page>
        </Document>
    );
};

export default TablePDFDocument; 